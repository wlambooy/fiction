//
// Created by Jan Drewniok on 23.11.22.
//

#ifndef FICTION_CHARGE_DISTRIBUTION_SURFACE_HPP
#define FICTION_CHARGE_DISTRIBUTION_SURFACE_HPP

#include "fiction/algorithms/path_finding/distance.hpp"
#include "fiction/algorithms/simulation/sidb/sidb_simulation_parameters.hpp"
#include "fiction/layouts/cell_level_layout.hpp"
#include "fiction/technology/sidb_charge_state.hpp"
#include "fiction/technology/sidb_defects.hpp"
#include "fiction/technology/sidb_nm_position.hpp"
#include "fiction/traits.hpp"
#include "fiction/types.hpp"

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdint>
#include <cstdlib>
#include <iterator>
#include <limits>
#include <optional>
#include <random>
#include <type_traits>
#include <utility>

namespace fiction
{

/**
 * A layout type to layer on top of any SiDB cell-level layout. It implements an interface to store and access
 * SiDBs' charge states.
 *
 * @tparam Lyt Cell-level layout based in SiQAD-coordinates.
 * @tparam has_sidb_charge_distribution Automatically determines whether a charge distribution interface is already
 * present.
 */
template <typename Lyt, bool has_charge_distribution_interface =
                            std::conjunction_v<has_assign_charge_state<Lyt>, has_get_charge_state<Lyt>>>
class charge_distribution_surface : public Lyt
{};

template <typename Lyt>
class charge_distribution_surface<Lyt, true> : public Lyt
{
  public:
    explicit charge_distribution_surface(const Lyt& lyt) : Lyt(lyt) {}
};

template <typename Lyt>
class charge_distribution_surface<Lyt, false> : public Lyt
{
  public:
    using charge_index_base = typename std::pair<uint64_t, uint8_t>;

    struct charge_distribution_storage
    {
      private:
        /**
         * The distance matrix is a vector of vectors storing the euclidean distance.
         */
        using distance_matrix = std::vector<std::vector<double>>;
        /**
         * The potential matrix is a vector of vectors storing the electrostatic potentials.
         */
        using potential_matrix = std::vector<std::vector<double>>;
        /**
         * It is a vector that stores the local electrostatic potential.
         */
        using local_potential = std::vector<double>;

      public:
        explicit charge_distribution_storage(
            const sidb_simulation_parameters&                     params             = sidb_simulation_parameters{},
            const std::unordered_map<typename Lyt::cell, double>& external_potential = {},
            const typename Lyt::cell&                             variable_cells     = {}) :
                phys_params{params},
                external_pot{external_potential},
                dependent_cell{variable_cells} {};
        /**
         * Stores all physical parameters used for the simulation.
         */
        sidb_simulation_parameters phys_params{};
        /**
         * All cells that are occupied by an SiDB are stored in order.
         */
        std::vector<typename Lyt::cell> sidb_order{};

        std::vector<typename Lyt::cell> sidb_order_without_three_state_cells{};
        /**
         * The SiDBs' charge states are stored. Corresponding cells are stored in `sidb_order`.
         */
        std::vector<sidb_charge_state> cell_charge{};
        /**
         * Distance between SiDBs are stored as matrix.
         */
        distance_matrix nm_dist_mat{};
        /**
         * Electrostatic potential between SiDBs are stored as matrix (here, still charge-independent).
         */
        potential_matrix pot_mat{};
        /**
         * Electrostatic potential at each SiDB position which is generated by defects.
         */
        std::unordered_map<typename Lyt::cell, double> defect_local_pot{};
        /**
         * Electrostatic potential at each SiDB position which is generated by defects.
         */
        std::unordered_map<typename Lyt::cell, double> external_pot{};
        /**
         * External electrostatic potential at each SiDB position.
         */
        local_potential local_pot{};
        /**
         * Stores the electrostatic energy of a given charge distribution.
         */
        double system_energy{0.0};
        /**
         * Labels if given charge distribution is physically valid (see https://ieeexplore.ieee.org/document/8963859).
         */
        bool validity = false;
        /**
         * Each charge distribution is assigned a unique index (first entry of pair), second one stores the base number
         * (2- or 3-state simulation).
         */
        charge_index_base charge_index{};

        charge_index_base charge_index_sub_layout{};
        /**
         * Depending on the number of SiDBs and the base number, a maximal number of possible charge distributions
         * exists.
         */
        uint64_t max_charge_index{};

        uint64_t max_charge_index_sub_layout{};
        /**
         * This pair stores the cell and its previously charge state (important when all possible charge distributions
         * are enumerated and checked for physical validity).
         */
        std::pair<uint64_t, int8_t> cell_history_gray_code{};
        /**
         * This vector stores the cells and its previously charge states of the charge distribution before the charge
         * index was changed.
         */
        std::vector<std::pair<uint64_t, int8_t>> cell_history{};
        /**
         * This unordered map stores the cells and the placed defect.
         */
        std::unordered_map<typename Lyt::cell, const sidb_defect> defects{};
        /**
         * Dependent cell is the cell which charge state is determined by all other SiDBs in the layout.
         */
        typename Lyt::cell dependent_cell{};
        /**
         * Charge index of the dependent cell in the layout.
         */
        uint64_t dependent_cell_index{};
        /**
         * This vector collects all cells that could potentially be positively charged based on the maximum possible
         * local potential.
         */
        std::vector<typename Lyt::cell> three_state_cells{};

        bool dependent_cell_in_sub_layout{};
    };

    using storage = std::shared_ptr<charge_distribution_storage>;

    /**
     * Standard constructor for empty layouts.
     *
     * @param params Physical parameters used for the simulation (µ_minus, base number, ...).
     * @param cs The charge state used for the initialization of all SiDBs, default is a negative charge.
     */
    explicit charge_distribution_surface(const sidb_simulation_parameters& params = sidb_simulation_parameters{},
                                         const sidb_charge_state&          cs     = sidb_charge_state::NEGATIVE) :
            Lyt(),
            strg{std::make_shared<charge_distribution_storage>(params)}
    {
        static_assert(has_siqad_coord_v<Lyt>, "Lyt is not based on SiQAD coordinates");
        static_assert(is_cell_level_layout_v<Lyt>, "Lyt is not a cell-level layout");
        static_assert(has_sidb_technology_v<Lyt>, "Lyt is not an SiDB layout");

        initialize(cs);
    }
    /**
     * Standard constructor for existing layouts.
     *
     * @param lyt The layout to be used as base.
     * @param params Physical parameters used for the simulation (µ_minus, base number, ...).
     * @param cs The charge state used for the initialization of all SiDBs, default is a negative charge.
     */

    explicit charge_distribution_surface(
        const Lyt& lyt, const sidb_simulation_parameters& params = sidb_simulation_parameters{},
        const sidb_charge_state& cs = sidb_charge_state::NEGATIVE, const typename Lyt::cell& variable_cells = {},
        const std::unordered_map<typename Lyt::cell, double>& external_potential = {}) :
            Lyt(lyt),
            strg{std::make_shared<charge_distribution_storage>(params, external_potential, variable_cells)}
    {
        static_assert(has_siqad_coord_v<Lyt>, "Lyt is not based on SiQAD coordinates");
        static_assert(is_cell_level_layout_v<Lyt>, "Lyt is not a cell-level layout");
        static_assert(has_sidb_technology_v<Lyt>, "Lyt is not an SiDB layout");

        initialize(cs);
    };
    /**
     * Copy constructor.
     *
     * @param lyt charge_distribution_surface
     */
    explicit charge_distribution_surface(const charge_distribution_surface<Lyt>& lyt) :
            Lyt(lyt),
            strg{std::make_shared<charge_distribution_storage>(*lyt.strg)}
    {}
    /**
     * Copy assignment operator.
     *
     * @param other charge_distribution_surface.
     */
    charge_distribution_surface& operator=(const charge_distribution_surface& other)
    {
        if (this != &other)
        {
            strg = std::make_shared<charge_distribution_storage>(*other.strg);
        }

        return *this;
    }
    /**
     * Returns all SiDB charges of the placed SiDBs as a vector.
     *
     * @return Vector of SiDB charges.
     */
    [[maybe_unused]] [[nodiscard]] std::vector<sidb_charge_state> get_all_sidb_charges() const noexcept
    {
        return strg->cell_charge;
    }

    [[nodiscard]] std::vector<typename Lyt::cell> get_all_sidbs() const noexcept
    {
        return strg->sidb_order;
    }
    /**
     * Returns the positions of all SiDBs in nm of the form `(x,y)`.
     *
     * @return Vector of SiDB nanometer positions.
     */
    [[nodiscard]] std::vector<std::pair<double, double>> get_all_sidb_locations_in_nm() const noexcept
    {
        std::vector<std::pair<double, double>> positions{};
        positions.reserve(strg->sidb_order.size());

        for (const auto& cell : strg->sidb_order)
        {
            auto pos = sidb_nm_position<Lyt>(strg->phys_params, cell);
            positions.push_back(std::make_pair(pos.first, pos.second));
        }

        return positions;
    }
    /**
     * Set the physical parameters for the simulation.
     *
     * @param params Physical parameters to be set.
     */
    void set_physical_parameters(const sidb_simulation_parameters& params) noexcept
    {
        if ((strg->phys_params.lat_a == params.lat_a) && (strg->phys_params.lat_b == params.lat_b) &&
            (strg->phys_params.lat_c == params.lat_c))
        {
            strg->phys_params         = params;
            strg->charge_index.second = params.base;
            strg->max_charge_index    = static_cast<uint64_t>(std::pow(strg->phys_params.base, this->num_cells())) - 1;
            this->update_local_potential();
            this->recompute_system_energy();
            this->validity_check();
        }
        else
        {
            strg->phys_params = params;
            this->initialize_nm_distance_matrix();
            this->initialize_potential_matrix();
            strg->charge_index.second = params.base;
            strg->max_charge_index    = static_cast<uint64_t>(std::pow(strg->phys_params.base, this->num_cells())) - 1;
            this->update_local_potential();
            this->recompute_system_energy();
            this->validity_check();
        }
    }

    /**
     * Set the base number for the simulation.
     *
     * @param base Base number to be set.
     */
    void set_base_num(const uint8_t base) noexcept
    {
        strg->phys_params.base    = base;
        strg->charge_index.second = base;
        if (!strg->dependent_cell.is_dead())
        {
            strg->max_charge_index =
                static_cast<uint64_t>(std::pow(static_cast<double>(base), this->num_cells() - 1) - 1);
        }
        else
        {
            strg->max_charge_index = static_cast<uint64_t>(std::pow(static_cast<double>(base), this->num_cells()) - 1);
        }
    }

    void base_to_three() noexcept
    {
        strg->phys_params.base               = 3;
        strg->charge_index.second            = 2;
        strg->charge_index_sub_layout.second = 3;
        if (!strg->dependent_cell.is_dead())
        {
            if (!strg->three_state_cells.empty())
            {
                if (std::find(strg->three_state_cells.cbegin(), strg->three_state_cells.cend(), strg->dependent_cell) !=
                    strg->three_state_cells.end())
                {
                    strg->max_charge_index =
                        static_cast<uint64_t>(std::pow(2, this->num_cells() - strg->three_state_cells.size()) - 1);
                    strg->max_charge_index_sub_layout =
                        static_cast<uint64_t>(std::pow(3, strg->three_state_cells.size() - 1) - 1);
                }
                else
                {
                    strg->max_charge_index =
                        static_cast<uint64_t>(std::pow(2, this->num_cells() - 1 - strg->three_state_cells.size()) - 1);
                    strg->max_charge_index_sub_layout =
                        static_cast<uint64_t>(std::pow(3, strg->three_state_cells.size()) - 1);
                }
            }
            else
            {
                strg->max_charge_index = static_cast<uint64_t>(std::pow(3, this->num_cells() - 1) - 1);
            }
        }
        else
        {
            strg->max_charge_index = static_cast<uint64_t>(std::pow(3, this->num_cells()) - 1);
        }
    }

    //     * Check if any SiDB exhibits the given charge state.
    //     *
    //     * @param cs Charge state.
    //     */
    [[nodiscard]] bool charge_exists(const sidb_charge_state& cs) const noexcept
    {
        return std::any_of(strg->cell_charge.cbegin(), strg->cell_charge.cend(),
                           [&cs](const sidb_charge_state& c) { return c == cs; });
    }
    /**
     * Retrieves the physical parameters of the simulation.
     *
     * @return sidb_simulation_parameters struct containing the physical parameters of the simulation.
     */
    [[nodiscard]] sidb_simulation_parameters get_phys_params() const noexcept
    {
        return strg->phys_params;
    }
    /**
     * This function assigns the given charge state to the cell of the layout at the specified index. It updates the
     * `cell_charge` member of `strg` object with the new charge state of the specified cell.
     *
     * @param i The index of the cell.
     * @param cs The charge state to be assigned to the cell.
     */
    void assign_charge_by_cell_index(const uint64_t i, const sidb_charge_state& cs) const noexcept
    {
        strg->cell_charge[i] = cs;
        this->charge_distribution_to_index();
    }
    /**
     * This function assigns the given charge state to the given cell of the layout.
     *
     * @param c The cell to which a charge state is to be assigned.
     * @param cs The charge state to be assigned to the cell.
     */
    void assign_charge_state(const typename Lyt::cell& c, const sidb_charge_state& cs,
                             const bool update_chargeconf = true) const noexcept
    {
        if (auto index = cell_to_index(c); index != -1)
        {
            strg->cell_charge[static_cast<uint64_t>(index)] = cs;
        }
        if (update_chargeconf)
        {
            this->charge_distribution_to_index();
        }
    }

    /**
     * This function assigns a defect to the layout.
     *
     * @param c The cell to which a defect is assigned.
     * @param defect Defect which is assigned to the layout.
     */
    void assign_defect(const typename Lyt::cell& c, const sidb_defect& defect) noexcept
    {
        if (std::find(strg->sidb_order.cbegin(), strg->sidb_order.cend(), c) == strg->sidb_order.end())
        {
            if (strg->defects.find(c) == strg->defects.end())
            {
                strg->defects.insert({c, defect});
                this->foreach_cell(
                    [this, &c, &defect](const auto& c1)
                    {
                        if (strg->defect_local_pot.empty())
                        {
                            strg->defect_local_pot.insert(std::make_pair(
                                c1, chargeless_potential_defect_with_given_distance(
                                        sidb_nanometer_distance<Lyt>(*this, c1, c, strg->phys_params), defect) *
                                        defect.charge));
                        }
                        else
                        {
                            strg->defect_local_pot[c1] +=
                                chargeless_potential_defect_with_given_distance(
                                    sidb_nanometer_distance<Lyt>(*this, c1, c, strg->phys_params), defect) *
                                defect.charge;
                        }
                    });
                this->update_after_charge_change(true);
            }

            else
            {
                this->foreach_cell(
                    [this, &c, &defect](const auto& c1)
                    {
                        strg->defect_local_pot[c1] =
                            strg->defect_local_pot[c1] +
                            chargeless_potential_defect_with_given_distance(
                                sidb_nanometer_distance<Lyt>(*this, c1, c, strg->phys_params), defect) *
                                defect.charge -
                            chargeless_potential_defect_with_given_distance(
                                sidb_nanometer_distance<Lyt>(*this, c1, c, strg->phys_params), strg->defects[c]) *
                                strg->defects[c].charge;
                    });
                strg->defects.erase(c);
                strg->defects.insert({c, defect});
                this->update_after_charge_change(true);
            }
        }
    }

    /**
     * This function assigns a defect to the layout.
     *
     * @param c The cell to which a defect is assigned.
     * @param defect Defect which is assigned to the layout.
     */
    void erase_defect(const typename Lyt::cell& c) noexcept
    {
        if (strg->defects.find(c) != strg->defects.cend())
        {
            this->foreach_cell(
                [this, &c](const auto& c1)
                {
                    strg->local_pot[cell_to_index(c1)] -=
                        chargeless_potential_defect_with_given_distance(
                            sidb_nanometer_distance<Lyt>(*this, c1, c, strg->phys_params), strg->defects[c]) *
                        strg->defects[c].charge;
                    strg->defect_local_pot[c1] -=
                        chargeless_potential_defect_with_given_distance(
                            sidb_nanometer_distance<Lyt>(*this, c1, c, strg->phys_params), strg->defects[c]) *
                        strg->defects[c].charge;
                });
            strg->defects.erase(c);
        }
    }
    /**
     * This function assigns the given charge state to the cell (accessed by `index`) of the layout.
     *
     * @param index The index of the cell to which a charge state is to be assigned.
     * @param cs The charge state to be assigned to the cell.
     * @param update_chargeconf if set to `true`, the charge distribution index is updated after the charge distribution
     * is changed.
     */
    void assign_charge_state_by_cell_index(const uint64_t index, const sidb_charge_state& cs,
                                           const bool update_chargeconf = true) noexcept
    {
        strg->cell_charge[index] = cs;

        if (update_chargeconf)
        {
            this->charge_distribution_to_index();
        }
    }
    /**
     * Sets the charge state of all SiDBs in the layout to a given charge state.
     *
     * @param cs The charge state to be assigned to all the SiDBs.
     */
    void set_all_charge_states(const sidb_charge_state& cs) noexcept
    {
        for (uint64_t i = 0u; i < strg->cell_charge.size(); ++i)
        {
            strg->cell_charge[i] = cs;
        }

        this->charge_distribution_to_index();
    }

    void set_global_external_potential(const double& potential_value, bool fixed_dependent_cell = true) noexcept
    {
        this->foreach_cell(
            [this, &potential_value](const auto& cell) {
                strg->external_pot.insert({cell, potential_value});
            });
        this->update_after_charge_change(fixed_dependent_cell);
    }
    /**
     * This function can be used to detect which SiDBs must be negatively charged due to their location. Important:
     * This function must be applied to a charge layout where all SiDBs are negatively initialized.
     *
     * @return Vector of indices describing which SiDBs must be negatively charged.
     */
    std::vector<int64_t> negative_sidb_detection() noexcept
    {
        std::vector<int64_t> negative_sidbs{};
        negative_sidbs.reserve(this->num_cells());
        this->foreach_cell(
            [&negative_sidbs, this](const auto& c)
            {
                if (const auto local_pot = this->get_local_potential(c); local_pot.has_value())
                {
                    if (-*local_pot + strg->phys_params.mu < -physical_constants::POP_STABILITY_ERR)
                    {
                        negative_sidbs.push_back(cell_to_index(c));
                    }
                }
            });
        return negative_sidbs;
    }

    /**
     * This function determines if given layout has to be simulated with three states since positively charged SiDBs can
     * occur due to the local potential analysis.
     *
     * @return return value is true when three state simulation is required.
     */
    bool three_state_sim_required() noexcept
    {
        this->update_after_charge_change();
        strg->three_state_cells                    = {};
        strg->sidb_order_without_three_state_cells = {};
        bool required                              = false;
        this->foreach_cell(
            [&required, this](const auto& c)
            {
                if (const auto local_pot = this->get_local_potential(c); local_pot.has_value())
                {
                    if (-*local_pot + strg->phys_params.mu_p > -physical_constants::POP_STABILITY_ERR)
                    {
                        strg->three_state_cells.emplace_back(c);
                        required = true;
                    }
                }
            });
        for (const auto& cell : strg->sidb_order)
        {
            if (std::find(strg->three_state_cells.cbegin(), strg->three_state_cells.cend(), cell) ==
                strg->three_state_cells.end())
            {
                strg->sidb_order_without_three_state_cells.push_back(cell);
            }
        }
        return required;
    }

    std::vector<typename Lyt::cell> get_positive_candidates() const noexcept
    {
        return strg->three_state_cells;
    }
    /**
     * Returns the charge state of a cell of the layout at a given index.
     *
     * @param index The index of the cell.
     * @return The charge state of the cell at the given index.
     */
    [[nodiscard]] sidb_charge_state get_charge_state_by_index(const uint64_t index) const noexcept
    {
        if (index < (strg->cell_charge.size()))
        {
            return strg->cell_charge[index];
        }

        return sidb_charge_state::NONE;
    }
    /**
     * Returns the charge state of a given cell.
     *
     * @param c The cell.
     * @return The charge state of the given cell.
     */
    [[nodiscard]] sidb_charge_state get_charge_state(const typename Lyt::cell& c) const noexcept
    {
        if (const auto index = cell_to_index(c); index != -1)
        {
            return strg->cell_charge[static_cast<uint64_t>(index)];
        }

        return sidb_charge_state::NONE;
    }
    /**
     * Finds the index of an SiDB.
     *
     * @param c The cell to find the index of.
     * @return The index of the cell in the layout. Returns -1 if the cell is not part of the layout.
     */
    [[nodiscard]] int64_t cell_to_index(const typename Lyt::cell& c) const noexcept
    {
        if (const auto it = std::find(strg->sidb_order.cbegin(), strg->sidb_order.cend(), c);
            it != strg->sidb_order.cend())
        {
            return static_cast<int64_t>(std::distance(strg->sidb_order.cbegin(), it));
        }

        return -1;
    }

    [[nodiscard]] int64_t positive_cell_to_index(const typename Lyt::cell& c) const noexcept
    {
        if (const auto it = std::find(strg->three_state_cells.cbegin(), strg->three_state_cells.cend(), c);
            it != strg->three_state_cells.cend())
        {
            return static_cast<int64_t>(std::distance(strg->three_state_cells.cbegin(), it));
        }
        return -1;
    }

    [[nodiscard]] int64_t negative_cell_to_index(const typename Lyt::cell& c) const noexcept
    {
        if (const auto it = std::find(strg->sidb_order_without_three_state_cells.cbegin(),
                                      strg->sidb_order_without_three_state_cells.cend(), c);
            it != strg->sidb_order_without_three_state_cells.cend())
        {
            return static_cast<int64_t>(std::distance(strg->sidb_order_without_three_state_cells.cbegin(), it));
        }
        return -1;
    }
    /**
     * Finds the cell of a given index.
     *
     * @param c The index to find the cell of.
     * @return The cell in the layout for the given index. Returns dead-coordinate if the index is not assigned to a not
     * empty cell in the layout.
     */
    [[nodiscard]] typename Lyt::cell index_to_cell(const uint64_t index) const noexcept
    {
        if (index < strg->sidb_order.size())
        {
            return strg->sidb_order[index];
        }

        return {};
    }

    /**
     * Finds the cell which is a candidate to be positively charged of a given index.
     *
     * @param c The index to find the cell of.
     * @return The cell in the layout for the given index. Returns dead-coordinate if the index is not assigned to a not
     * empty cell in the layout.
     */
    [[nodiscard]] typename Lyt::cell index_to_three_state_cell(const uint64_t index) const noexcept
    {
        if (index < strg->three_state_cells.size())
        {
            return strg->three_state_cells[index];
        }

        return {};
    }

    /**
     * Finds the cell which can only be neutrally or negatively charged of a given index.
     *
     * @param c The index to find the cell of.
     * @return The cell in the layout for the given index. Returns dead-coordinate if the index is not assigned to a not
     * empty cell in the layout.
     */
    [[nodiscard]] typename Lyt::cell index_to_two_state_cell(const uint64_t index) const noexcept
    {
        if (index < strg->sidb_order_without_three_state_cells.size())
        {
            return strg->sidb_order_without_three_state_cells[index];
        }

        return {};
    }

    /**
     *  Returns the distance between two cells.
     *
     *  @param c1 the first cell to compare.
     *  @param c2 the second cell to compare.
     *  @return a constexpr double representing the distance in nm between the two cells.
     */
    [[nodiscard]] double get_nm_distance_between_cells(const typename Lyt::cell& c1,
                                                       const typename Lyt::cell& c2) const noexcept
    {
        if (const auto index1 = cell_to_index(c1), index2 = cell_to_index(c2); (index1 != -1) && (index2 != -1))
        {
            return strg->nm_dist_mat[static_cast<uint64_t>(index1)][static_cast<uint64_t>(index2)];
        }

        return 0;
    }
    /**
     * Calculates and returns the distance between two cells (accessed by indices).
     *
     * @param index1 The first index.
     * @param index2 The second index.
     * @return The distance index between `index1` and `index2` (indices correspond to unique SiDBs).
     */
    [[nodiscard]] double get_nm_distance_by_indices(const uint64_t index1, const uint64_t index2) const noexcept
    {
        return strg->nm_dist_mat[index1][index2];
    }
    /**
     * Returns the chargeless electrostatic potential between two cells.
     *
     * @note If the signed electrostatic potential \f$ V_{i,j} \f$ is required, use the `get_potential_between_sidbs`
     * function.
     *
     * @param c1 The first cell.
     * @param c2 The second cell.
     * @return The chargeless electrostatic potential between `c1` and `c2`, i.e, \f$ \frac{V_{i,j}}{n_j} \f$.
     */
    [[nodiscard]] double get_chargeless_potential_between_sidbs(const typename Lyt::cell& c1,
                                                                const typename Lyt::cell& c2) const noexcept
    {
        if (const auto index1 = cell_to_index(c1), index2 = cell_to_index(c2); (index1 != -1) && (index2 != -1))
        {
            return strg->pot_mat[static_cast<uint64_t>(index1)][static_cast<uint64_t>(index2)];
        }

        return 0;
    }
    /**
     * Calculates and returns the electrostatic potential at one cell (`c1`) generated by another cell (`c2`).
     *
     * @note If the chargeless electrostatic potential \f$ \frac{V_{i,j}}{n_j} \f$ is required, use the
     * `get_chargeless_potential_between_sidbs` function.
     *
     * @param c1 The first cell.
     * @param c2 The second cell.
     * @return The electrostatic potential between `c1` and `c2`, i.e., \f$ V_{i,j} \f$.
     */
    [[nodiscard]] double get_potential_between_sidbs(const typename Lyt::cell& c1,
                                                     const typename Lyt::cell& c2) const noexcept
    {
        if (const auto index1 = cell_to_index(c1), index2 = cell_to_index(c2); (index1 != -1) && (index2 != -1))
        {
            return strg->pot_mat[static_cast<uint64_t>(index1)][static_cast<uint64_t>(index2)] *
                   charge_state_to_sign(get_charge_state(c2));
        }

        return 0;
    }
    /**
     * Calculates and returns the potential of two indices.
     *
     * @param index1 The first index.
     * @param index2 The second index.
     * @return The potential between `index1` and `index2`.
     */
    [[nodiscard]] double get_electrostatic_potential_by_indices(const uint64_t index1,
                                                                const uint64_t index2) const noexcept
    {
        return strg->pot_mat[index1][index2];
    }
    /**
     * The electrostatic potential between two cells (SiDBs) is calculated.
     *
     * @param index1 The first index.
     * @param index1 The second index.
     * @return The potential between `index1` and `index2`.
     */
    [[nodiscard]] double potential_between_sidbs_by_index(const uint64_t index1, const uint64_t index2) const noexcept
    {
        if (strg->nm_dist_mat[index1][index2] == 0)
        {
            return 0.0;
        }

        return (strg->phys_params.k / (strg->nm_dist_mat[index1][index2] * 1E-9) *
                std::exp(-strg->nm_dist_mat[index1][index2] / strg->phys_params.lambda_tf) *
                physical_constants::ELECTRIC_CHARGE);
    }

    [[nodiscard]] double chargeless_potential_with_given_distance(const double& distance) const noexcept
    {
        if (distance == 0.0)
        {
            return 0.0;
        }
        return (strg->phys_params.k / distance * std::exp(-distance / strg->phys_params.lambda_tf) *
                physical_constants::ELECTRIC_CHARGE);
    }

    [[nodiscard]] double
    chargeless_potential_defect_with_given_distance(const double&      distance,
                                                    const sidb_defect& defect = sidb_defect{}) const noexcept
    {
        if (distance == 0.0)
        {
            return 0.0;
        }

        return 1.0 / (4.0 * fiction::physical_constants::PI * fiction::physical_constants::EPSILON * defect.epsilon_r) /
               distance * std::exp(-distance / defect.lambda_tf) * physical_constants::ELECTRIC_CHARGE;
    }

    /**
     * Calculates and returns the potential of a pair of cells based on their distance and simulation parameters.
     *
     * @param c1 The first cell.
     * @param c2 The second cell.
     * @return The potential between c1 and c2.
     */
    [[nodiscard]] double potential_between_sidbs(const typename Lyt::cell& c1,
                                                 const typename Lyt::cell& c2) const noexcept
    {
        const auto index1 = static_cast<std::size_t>(cell_to_index(c1));
        const auto index2 = static_cast<std::size_t>(cell_to_index(c2));

        return potential_between_sidbs_by_index(index1, index2);
    }
    /**
     * This function can be used to assign an external electrostatic potential to the layout. All important attributes
     * of the charge layout are updated automatically.
     */
    void set_local_external_potential(const std::unordered_map<typename Lyt::cell, double>& external_voltage) noexcept
    {
        strg->external_pot = external_voltage;
        this->update_after_charge_change();
    }

    /**
     * The function returns the external electrostatic potential applied to the charge distribution surface.
     *
     * @return External electrostatic potential as unordered map. The cell is used as key and the external electrostatic
     * potential at its position as value.
     */
    std::unordered_map<typename Lyt::cell, double> get_external_potentials() noexcept
    {
        return strg->external_pot;
    }

    std::unordered_map<typename Lyt::cell, double> get_defect_potentials() noexcept
    {
        return strg->defect_local_pot;
    }

    std::unordered_map<typename Lyt::cell, const sidb_defect> get_defects() noexcept
    {
        return strg->defects;
    }

    /**
     * The function calculates the local electrostatic potential for each SiDB position and external electrostatic
     * potentials (generated by electrodes, defects, etc.) are included.
     *
     * @param consider_history If set to true, the changed cells due to
     */
    void update_local_potential(const bool consider_history = false) noexcept
    {
        if (!consider_history)
        {
            strg->local_pot.resize(this->num_cells(), 0);

            for (uint64_t i = 0u; i < strg->sidb_order.size(); ++i)
            {
                double collect = 0;
                for (uint64_t j = 0u; j < strg->sidb_order.size(); j++)
                {
                    collect += strg->pot_mat[i][j] * static_cast<double>(charge_state_to_sign(strg->cell_charge[j]));
                }

                strg->local_pot[i] = collect;
            }

            for (const auto& [cell, defect_pot] : strg->defect_local_pot)
            {
                strg->local_pot[static_cast<uint64_t>(cell_to_index(cell))] += defect_pot;
            }

            for (const auto& [cell, external_pot] : strg->external_pot)
            {
                strg->local_pot[static_cast<uint64_t>(cell_to_index(cell))] += external_pot;
            }
        }
        else
        {
            if (strg->phys_params.base == 2)
            {
                if (strg->cell_history_gray_code.first != -1)
                {
                    const auto cell_charge = static_cast<double>(
                        charge_state_to_sign(strg->cell_charge[strg->cell_history_gray_code.first]));
                    const auto charge_diff = (cell_charge - strg->cell_history_gray_code.second);
                    for (uint64_t j = 0u; j < strg->sidb_order.size(); j++)
                    {
                        strg->local_pot[j] += strg->pot_mat[strg->cell_history_gray_code.first][j] * charge_diff;
                    }
                }
            }
            else
            {
                for (const auto& [changed_cell, charge] : strg->cell_history)
                {
                    for (uint64_t j = 0u; j < strg->sidb_order.size(); j++)
                    {
                        strg->local_pot[j] +=
                            strg->pot_mat[changed_cell][j] *
                            (static_cast<double>(charge_state_to_sign(strg->cell_charge[changed_cell])) - charge);
                    }
                }
            }
        }
    }

    void update_charge_state_of_dependent_cell() noexcept
    {
        if (!strg->dependent_cell.is_dead())
        {
            const auto loc_pot_cell = -strg->local_pot[strg->dependent_cell_index];
            if (loc_pot_cell + strg->phys_params.mu < physical_constants::POP_STABILITY_ERR)
            {
                if (strg->cell_charge[strg->dependent_cell_index] != sidb_charge_state::NEGATIVE)
                {
                    const auto charge_diff = (-charge_state_to_sign(strg->cell_charge[strg->dependent_cell_index]) - 1);
                    for (uint64_t i = 0u; i < strg->pot_mat.size(); ++i)
                    {
                        if (i != strg->dependent_cell_index)
                        {
                            strg->local_pot[i] +=
                                (this->get_electrostatic_potential_by_indices(i, strg->dependent_cell_index)) *
                                charge_diff;
                        }
                    }
                    strg->cell_charge[strg->dependent_cell_index] = sidb_charge_state::NEGATIVE;
                }
            }
            else if (loc_pot_cell + strg->phys_params.mu_p > -physical_constants::POP_STABILITY_ERR)
            {
                if (strg->cell_charge[strg->dependent_cell_index] != sidb_charge_state::POSITIVE)
                {
                    const auto charge_diff = (-charge_state_to_sign(strg->cell_charge[strg->dependent_cell_index]) + 1);
                    for (uint64_t i = 0u; i < strg->pot_mat.size(); ++i)
                    {
                        if (i != strg->dependent_cell_index)
                        {
                            strg->local_pot[i] +=
                                (this->get_electrostatic_potential_by_indices(i, strg->dependent_cell_index)) *
                                charge_diff;
                        }
                    }
                    strg->cell_charge[strg->dependent_cell_index] = sidb_charge_state::POSITIVE;
                }
            }

            else
            {
                if (strg->cell_charge[strg->dependent_cell_index] != sidb_charge_state::NEUTRAL)
                {
                    const auto charge_diff = (-charge_state_to_sign(strg->cell_charge[strg->dependent_cell_index]));
                    for (uint64_t i = 0u; i < strg->pot_mat.size(); ++i)
                    {
                        if (i != strg->dependent_cell_index)
                        {
                            strg->local_pot[i] +=
                                (this->get_electrostatic_potential_by_indices(i, strg->dependent_cell_index)) *
                                charge_diff;
                        }
                    }
                    strg->cell_charge[strg->dependent_cell_index] = sidb_charge_state::NEUTRAL;
                }
            }
        }
    }

    /**
     * The function returns the local electrostatic potential at a given SiDB position.
     *
     * @param c The cell defining the SiDB position.
     * @return Local potential at given cell position. If there is no SiDB at the given cell, `std::nullopt` is
     * returned.
     */
    std::optional<double> get_local_potential(const typename Lyt::cell& c) const noexcept
    {
        if (const auto index = cell_to_index(c); index != -1)
        {
            return strg->local_pot[static_cast<uint64_t>(index)];
        }

        return std::nullopt;
    }
    /**
     * The function returns the local electrostatic potential at a given index position.
     *
     * @param index The index defining the SiDB position.
     * @return local potential at given index position. If there is no SiDB at the given index (which corresponds to a
     * unique cell), `std::nullopt` is returned.
     */
    [[nodiscard]] std::optional<double> get_local_potential_by_index(const uint64_t index) const noexcept
    {
        if (index < strg->sidb_order.size())
        {
            return strg->local_pot[index];
        }

        return std::nullopt;
    }
    /**
     * Sets the electrostatic system energy to zero. Can be used if only one SiDB is charged.
     */
    void set_system_energy_to_zero() noexcept
    {
        strg->system_energy = 0.0;
    }
    /**
     * Calculates the system's total electrostatic potential energy and stores it in the storage.
     */
    void recompute_system_energy() noexcept
    {
        double total_energy = 0;

        for (uint64_t i = 0; i < strg->local_pot.size(); ++i)
        {
            total_energy += 0.5 * strg->local_pot[i] * charge_state_to_sign(strg->cell_charge[i]);
        }
        strg->system_energy = total_energy;

        double defect_energy = 0;
        for (const auto& [cell, pot] : strg->defect_local_pot)
        {
            defect_energy += pot * charge_state_to_sign(strg->cell_charge[cell_to_index(cell)]);
        }
        strg->system_energy = total_energy + 0.5 * defect_energy;

        double defect_interaction = 0;
        for (const auto& [cell1, defect1] : strg->defects)
        {
            for (const auto& [cell2, defect2] : strg->defects)
            {
                defect_interaction += chargeless_potential_with_given_distance(
                    sidb_nanometer_distance<Lyt>(*this, cell1, cell2, strg->phys_params));
            }
        }
        strg->system_energy = total_energy + 0.5 * defect_energy + 0.5 * defect_interaction;
    }
    /**
     * Return the currently stored system's total electrostatic potential energy.
     *
     * @return The system's total electrostatic potential energy.
     */
    [[nodiscard]] double get_system_energy() const noexcept
    {
        return strg->system_energy;
    }
    /**
     * The function updates the local potential and the system energy after a charge change.
     */
    void update_after_charge_change(const bool dependent_cell_fixed = true, const bool energy_calculation = true,
                                    const bool& consider_history = false) noexcept
    {
        this->update_local_potential(consider_history);
        if (!dependent_cell_fixed)
        {
            this->update_charge_state_of_dependent_cell();
        }
        if (energy_calculation)
        {
            this->recompute_system_energy();
        }
        this->validity_check();
    }

    /**
     * The physically validity of the current charge distribution is evaluated and stored in the storage struct. A
     * charge distribution is valid if the *Population Stability* and the *Configuration Stability* is fulfilled.
     */
    void validity_check() noexcept
    {
        uint64_t population_stability_not_fulfilled_counter = 0;
        uint64_t for_loop_counter                           = 0;

        const auto cell_index = static_cast<uint64_t>(cell_to_index(strg->dependent_cell));
        for (const auto& it : strg->local_pot)  // this for-loop checks if the "population stability" is fulfilled.
        {
            const auto cell_charge = strg->cell_charge[for_loop_counter];
            bool       valid       = (((cell_charge == sidb_charge_state::NEGATIVE) &&
                           ((-it + strg->phys_params.mu) < physical_constants::POP_STABILITY_ERR)) ||
                          ((cell_charge == sidb_charge_state::POSITIVE) &&
                           ((-it + strg->phys_params.mu_p) > -physical_constants::POP_STABILITY_ERR)) ||
                          ((cell_charge == sidb_charge_state::NEUTRAL) &&
                           ((-it + strg->phys_params.mu) > -physical_constants::POP_STABILITY_ERR) &&
                           (-it + strg->phys_params.mu_p) < physical_constants::POP_STABILITY_ERR));
            for_loop_counter += 1;
            if (!valid)
            {
                strg->validity = false;  // if at least one SiDB does not fulfill the population stability, the validity
                                         // of the given charge distribution is set to "false".
                population_stability_not_fulfilled_counter += 1;
                break;
            }
        }

        if ((population_stability_not_fulfilled_counter == 0) &&
            (for_loop_counter >
             0))  // if population stability is fulfilled for all SiDBs, the "configuration stability" is checked.
        {
            const auto hop_del =
                [this](const uint64_t c1, const uint64_t c2)  // energy change when charge hops between two SiDBs.
            {
                const int dn_i = (strg->cell_charge[c1] == sidb_charge_state::NEGATIVE) ? 1 : -1;
                const int dn_j = -dn_i;

                return strg->local_pot[c1] * dn_i + strg->local_pot[c2] * dn_j - strg->pot_mat[c1][c2] * 1;
            };

            uint64_t hop_counter = 0;
            for (uint64_t i = 0u; i < strg->local_pot.size(); ++i)
            {
                if (strg->cell_charge[i] == sidb_charge_state::POSITIVE)  // we do nothing with SiDB+
                {
                    continue;
                }

                for (uint64_t j = 0u; j < strg->local_pot.size(); j++)
                {
                    if (hop_counter == 1)
                    {
                        break;
                    }

                    if (const auto e_del = hop_del(i, j);
                        (charge_state_to_sign(strg->cell_charge[j]) > charge_state_to_sign(strg->cell_charge[i])) &&
                        (e_del < -physical_constants::POP_STABILITY_ERR))  // Checks if energetically favored hops
                                                                           // exist between two SiDBs.
                    {
                        hop_counter = 1;

                        break;
                    }
                }
            }

            // If there is no jump that leads to a decrease in the potential energy of the system, the given charge
            // distribution satisfies metastability.
            strg->validity = hop_counter == 0;
        }
    }
    /**
     * Returns the currently stored validity of the present charge distribution layout.
     *
     * @returns The validity of the present charge distribution.
     */
    [[nodiscard]] bool is_physically_valid() const noexcept
    {
        return strg->validity;
    }
    /**
     * The charge distribution of the charge distribution surface is converted to a unique index. It is used to map
     * every possible charge distribution of an SiDB layout to a unique index.
     */
    void charge_distribution_to_index() const noexcept
    {
        const uint8_t base = strg->phys_params.base;

        uint64_t   chargeindex          = 0;
        uint64_t   counter              = 0;

        uint64_t chargeindex_sub_layout = 0;
        uint64_t counter_sub_layout     = 0;

        if (!strg->dependent_cell.is_dead())
        {
            if (!strg->three_state_cells.empty())
            {
                if (strg->dependent_cell_in_sub_layout)
                {
                    for (const auto& cell : strg->three_state_cells)
                    {
                        if (cell != strg->dependent_cell)
                        {
                            chargeindex_sub_layout += static_cast<uint64_t>(
                                (charge_state_to_sign(strg->cell_charge[cell_to_index(cell)]) + 1) *
                                std::pow(3, this->num_cells() - 1 - counter - 1));
                            counter_sub_layout += 1;
                        }
                    }
                    for (const auto& cell : strg->sidb_order_without_three_state_cells)
                    {
                        chargeindex +=
                            static_cast<uint64_t>((charge_state_to_sign(strg->cell_charge[cell_to_index(cell)]) + 1) *
                                                  std::pow(2, this->num_cells() - 1 - counter - 1));
                        counter += 1;
                    }
                }
                else
                {
                    for (const auto& cell : strg->three_state_cells)
                    {

                        chargeindex_sub_layout +=
                            static_cast<uint64_t>((charge_state_to_sign(strg->cell_charge[cell_to_index(cell)]) + 1) *
                                                  std::pow(3, this->num_cells() - 1 - counter - 1));
                        counter_sub_layout += 1;
                    }
                    for (const auto& cell : strg->sidb_order_without_three_state_cells)
                    {
                        if (cell != strg->dependent_cell)
                        {
                            chargeindex += static_cast<uint64_t>(
                                (charge_state_to_sign(strg->cell_charge[cell_to_index(cell)]) + 1) *
                                std::pow(2, this->num_cells() - 1 - counter - 1));
                            counter += 1;
                        }
                    }
                }
            }
            else
            {
                for (uint64_t c = 0; c < strg->cell_charge.size(); c++)
                {
                    if (c != cell_to_index(strg->dependent_cell))
                    {
                        chargeindex += static_cast<uint64_t>((charge_state_to_sign(strg->cell_charge[c]) + 1) *
                                                             std::pow(base, this->num_cells() - 1 - counter - 1));
                        counter += 1;
                    }
                }
            }
        }

        else
        {
            if (!strg->three_state_cells.empty())
            {
                for (const auto& cell : strg->three_state_cells)
                {

                    chargeindex_sub_layout +=
                        static_cast<uint64_t>((charge_state_to_sign(strg->cell_charge[cell_to_index(cell)]) + 1) *
                                              std::pow(3, this->num_cells() - 1 - counter));
                    counter_sub_layout += 1;
                }
                for (const auto& cell : strg->sidb_order_without_three_state_cells)
                {

                    chargeindex +=
                        static_cast<uint64_t>((charge_state_to_sign(strg->cell_charge[cell_to_index(cell)]) + 1) *
                                              std::pow(2, this->num_cells() - 1 - counter));
                    counter += 1;
                }
            }
            else
            {
                for (const auto& cell : strg->sidb_order)
                {
                    chargeindex +=
                        static_cast<uint64_t>((charge_state_to_sign(strg->cell_charge[cell_to_index(cell)]) + 1) *
                                              std::pow(base, this->num_cells() - 1 - counter));
                    counter += 1;
                }
            }
        }

        strg->charge_index            = {chargeindex, base};
        strg->charge_index_sub_layout = {chargeindex_sub_layout, 3};
    }
    /**
     * The charge index of the current charge distribution is returned.
     *
     * @return A pair with the charge index and the used base is returned.
     */
    [[nodiscard]] charge_index_base get_charge_index() const noexcept
    {
        return strg->charge_index;
    }

    [[nodiscard]] charge_index_base get_charge_index_sub_layout() const noexcept
    {
        return strg->charge_index_sub_layout;
    }
    /**
     *  The stored unique index is converted to the charge distribution of the charge distribution surface.
     */
    void index_to_charge_distribution(const bool fast_three_state_simulation = false) noexcept
    {
        if (!fast_three_state_simulation)
        {
            strg->cell_history = {};
            strg->cell_history.reserve(this->num_cells());

            auto       charge_quot          = strg->charge_index.first;
            const auto base                 = strg->charge_index.second;
            const auto num_charges          = this->num_cells();
            auto       counter              = num_charges - 1;
            const auto dependent_cell_index = cell_to_index(strg->dependent_cell);

            if (charge_quot == 0)
            {
                this->set_all_charge_states(sidb_charge_state::NEGATIVE);
            }
            else
            {
                while (charge_quot > 0)
                {
                    const auto    charge_quot_int = static_cast<int64_t>(charge_quot);
                    const auto    base_int        = static_cast<int64_t>(base);
                    const int64_t quotient_int    = charge_quot_int / base_int;
                    const int64_t remainder_int   = charge_quot_int % base_int;
                    charge_quot                   = static_cast<uint64_t>(quotient_int);

                    if (counter != dependent_cell_index)
                    {
                        const auto sign = sign_to_charge_state(static_cast<int8_t>(remainder_int - 1));
                        if (const auto new_chargesign = this->get_charge_state_by_index(counter);
                            new_chargesign != sign)
                        {
                            strg->cell_history.emplace_back(static_cast<uint64_t>(counter),
                                                            charge_state_to_sign(new_chargesign));
                            this->assign_charge_state_by_cell_index(counter, sign, false);
                        }
                        counter -= 1;
                    }
                    else
                    {
                        counter -= 1;
                        const auto sign = sign_to_charge_state(static_cast<int8_t>(remainder_int - 1));
                        if (const auto old_chargesign = this->get_charge_state_by_index(counter);
                            old_chargesign != sign)
                        {
                            strg->cell_history.emplace_back(static_cast<uint64_t>(counter),
                                                            charge_state_to_sign(old_chargesign));
                            this->assign_charge_state_by_cell_index(counter, sign, false);
                        }
                        counter -= 1;
                    }
                }
            }
        }
        else
        {
            strg->cell_history = {};
            strg->cell_history.reserve(this->num_cells());

            if (strg->charge_index.first == 0)
            {
                for (const auto& cell : strg->sidb_order_without_three_state_cells)
                {
                    if (this->get_charge_state(cell) != sidb_charge_state::NEGATIVE && cell != strg->dependent_cell)
                    {
                        strg->cell_history.emplace_back(cell_to_index(cell),
                                                        charge_state_to_sign(get_charge_state(cell)));
                        this->assign_charge_state(cell, sidb_charge_state::NEGATIVE, !fast_three_state_simulation);
                    }
                }
            }
            if (strg->cell_history.empty())
            {
                if (strg->charge_index_sub_layout.first == 0)
                {
                    for (const auto& cell : strg->three_state_cells)
                    {
                        if (this->get_charge_state(cell) != sidb_charge_state::NEGATIVE && cell != strg->dependent_cell)
                        {
                            strg->cell_history.emplace_back(cell_to_index(cell),
                                                            charge_state_to_sign(get_charge_state(cell)));
                            this->assign_charge_state(cell, sidb_charge_state::NEGATIVE, !fast_three_state_simulation);
                        }
                    }
                }
            }
            const auto num_charges          = this->num_cells();
            const auto dependent_cell_index = positive_cell_to_index(strg->dependent_cell);

            auto       charge_quot_positive = strg->charge_index_sub_layout.first;
            const auto base_positive        = strg->charge_index_sub_layout.second;
            auto       counter              = strg->three_state_cells.size() - 1;

            while (charge_quot_positive > 0)
            {
                const auto    charge_quot_int = static_cast<int64_t>(charge_quot_positive);
                const auto    base_int        = static_cast<int64_t>(base_positive);
                const int64_t quotient_int    = charge_quot_int / base_int;
                const int64_t remainder_int   = charge_quot_int % base_int;
                charge_quot_positive          = static_cast<uint64_t>(quotient_int);

                if (counter != dependent_cell_index)
                {
                    const auto sign = sign_to_charge_state(static_cast<int8_t>(remainder_int - 1));
                    if (const auto new_chargesign =
                            this->get_charge_state_by_index(cell_to_index(index_to_three_state_cell(counter)));
                        new_chargesign != sign)
                    {
                        strg->cell_history.emplace_back(
                            static_cast<uint64_t>(cell_to_index(index_to_three_state_cell(counter))),
                            charge_state_to_sign(new_chargesign));
                        this->assign_charge_state_by_cell_index(cell_to_index(index_to_three_state_cell(counter)), sign,
                                                                false);
                    }
                    counter -= 1;
                }
                else
                {
                    counter -= 1;
                    const auto sign = sign_to_charge_state(static_cast<int8_t>(remainder_int - 1));
                    if (const auto old_chargesign =
                            this->get_charge_state_by_index(cell_to_index(index_to_three_state_cell(counter)));
                        old_chargesign != sign)
                    {
                        strg->cell_history.emplace_back(
                            static_cast<uint64_t>(cell_to_index(index_to_three_state_cell(counter))),
                            charge_state_to_sign(old_chargesign));
                        this->assign_charge_state_by_cell_index(cell_to_index(index_to_three_state_cell(counter)), sign,
                                                                false);
                    }
                    counter -= 1;
                }
            }

            const auto dependent_cell_index_negative = negative_cell_to_index(strg->dependent_cell);
            auto       charge_quot                   = strg->charge_index.first;
            const auto base                          = strg->charge_index.second;
            auto       counter_negative              = strg->sidb_order_without_three_state_cells.size() - 1;

            while (charge_quot > 0)
            {
                const auto    charge_quot_int = static_cast<int64_t>(charge_quot);
                const auto    base_int        = static_cast<int64_t>(base);
                const int64_t quotient_int    = charge_quot_int / base_int;
                const int64_t remainder_int   = charge_quot_int % base_int;
                charge_quot                   = static_cast<uint64_t>(quotient_int);

                if (counter_negative != dependent_cell_index_negative)
                {
                    const auto sign = sign_to_charge_state(static_cast<int8_t>(remainder_int - 1));
                    if (const auto new_chargesign =
                            this->get_charge_state_by_index(cell_to_index(index_to_two_state_cell(counter_negative)));
                        new_chargesign != sign)
                    {
                        strg->cell_history.emplace_back(
                            static_cast<uint64_t>(cell_to_index(index_to_two_state_cell(counter_negative))),
                            charge_state_to_sign(new_chargesign));
                        this->assign_charge_state_by_cell_index(
                            cell_to_index(index_to_two_state_cell(counter_negative)), sign, false);
                    }
                    counter_negative -= 1;
                }
                else
                {
                    counter_negative -= 1;
                    const auto sign = sign_to_charge_state(static_cast<int8_t>(remainder_int - 1));
                    if (const auto old_chargesign =
                            this->get_charge_state_by_index(cell_to_index(index_to_two_state_cell(counter_negative)));
                        old_chargesign != sign)
                    {
                        strg->cell_history.emplace_back(
                            static_cast<uint64_t>(cell_to_index(index_to_two_state_cell(counter_negative))),
                            charge_state_to_sign(old_chargesign));
                        this->assign_charge_state_by_cell_index(
                            cell_to_index(index_to_two_state_cell(counter_negative)), sign, false);
                    }
                    counter_negative -= 1;
                }
            }
        }
    }

    /**
     *  This function changes the current charge distribution based on two given gray codes (Important: the two gray
     * codes should only differ by one bit)
     *
     * @param new_gray_code gray code as uint64_t of the new charge distribution.
     * @param old_gray_code gray code as uint64_t of the previous charge distribution layout.
     */
    void index_to_charge_distribution_gray_code(uint64_t new_gray_code, uint64_t old_gray_code) noexcept
    {
        strg->cell_history_gray_code = {};

        const std::bitset<64> r_new(new_gray_code);
        const std::bitset<64> r_old(old_gray_code);
        std::bitset<64>       diff = r_new ^ r_old;

        uint64_t index_changed = 0;

        if (diff != 0)
        {

            while (index_changed < diff.size() && !diff.test(index_changed))
            {
                index_changed++;
            }

            const auto sign_old = -static_cast<int8_t>(r_old[index_changed]);
            const auto sign_new = -static_cast<int8_t>(r_new[index_changed]);

            if (index_changed < strg->dependent_cell_index)
            {
                strg->cell_history_gray_code.first  = index_changed;
                strg->cell_history_gray_code.second = sign_old;
                this->assign_charge_state_by_cell_index(index_changed, sign_to_charge_state(sign_new), false);
            }
            else
            {
                strg->cell_history_gray_code.first  = index_changed + 1;
                strg->cell_history_gray_code.second = sign_old;
                this->assign_charge_state_by_cell_index(index_changed + 1, sign_to_charge_state(sign_new), false);
            }
        }
        else
        {
            strg->cell_history_gray_code.first  = -1;
            strg->cell_history_gray_code.second = 0;
        }
    }
    /**
     * The charge index is increased by one, but only if it is less than the maximum charge index for the given layout.
     * If that's the case, it is increased by one and afterward, the charge configuration is updated by invoking the
     * `index_to_charge_distribution()` function.
     */
    void increase_charge_index_by_one(const bool  dependent_cell_fixed    = true,
                                      const bool& recompute_system_energy = true, const bool& consider_history = false,
                                      const bool& fast_three_state = false) noexcept
    {
        if (strg->charge_index.first < strg->max_charge_index)
        {
            strg->charge_index.first += 1;
            this->index_to_charge_distribution(fast_three_state);
            this->update_after_charge_change(dependent_cell_fixed, recompute_system_energy, consider_history);
        }
    }

    void increase_charge_index_by_sub_layout(const bool  dependent_cell_fixed    = true,
                                             const bool& recompute_system_energy = true,
                                             const bool& consider_history        = false,
                                             const bool& fast_three_state        = false) noexcept
    {
        if (strg->charge_index_sub_layout.first < strg->max_charge_index_sub_layout)
        {
            strg->charge_index_sub_layout.first += 1;
            this->index_to_charge_distribution(fast_three_state);
            // std::cout << strg->cell_history.size() << std::endl;
            this->update_after_charge_change(dependent_cell_fixed, recompute_system_energy, consider_history);
        }
    }
    /**
     * The charge index is set by a gray code number in decimal.
     *
     * @param gray_code gray code in decimal representing the new charge distribution.
     * @param gray_code_old gray code in decimal representing the old charge distribution.
     * @param dependent_cell_fixed if set to true, the dependent cell's charge state is changed based on the local
     * potential at its position.
     * @param recompute_system_energy if set to true, the system energy is calculated for the new charge distribution.
     * @param consider_histroy if set to true, the cells which changed due to the change of the charge index, are used
     * to speed up the calculation of the calculation of the local potential, etc.
     */
    void set_charge_index_by_gray(const uint64_t gray_code, const uint64_t gray_code_old,
                                  const bool dependent_cell_fixed = true, const bool& recompute_system_energy = true,
                                  const bool& consider_history = false) noexcept
    {
        if (gray_code <= strg->max_charge_index)
        {
            this->assign_charge_index_by_gray_code(gray_code, gray_code_old);
            this->update_after_charge_change(dependent_cell_fixed, recompute_system_energy, consider_history);
        }
    }

    void reset_charge_index_sub_layout(const bool  dependent_cell_fixed    = true,
                                       const bool& recompute_system_energy = true, const bool& consider_history = false,
                                       const bool& fast_three_state = false) noexcept
    {

        strg->charge_index_sub_layout.first = 0;
        this->index_to_charge_distribution(fast_three_state);
        this->update_after_charge_change(dependent_cell_fixed, recompute_system_energy, consider_history);
    }
    /**
     * Returns the maximum index of the cell-level layout.
     *
     * @returns The maximal possible charge distribution index.
     */
    [[nodiscard]] uint64_t get_max_charge_index() const noexcept
    {
        return strg->max_charge_index;
    }

    [[nodiscard]] uint64_t get_max_charge_index_sub_layout() const noexcept
    {
        return strg->max_charge_index_sub_layout;
    }
    /**
     * Assign a given charge index to the charge distribution layout. This function should be used if new and old charge
     * index are given as gray code to provide high performance.
     *
     * @param gray_code charge index (as gray code in decimal) of the new charge distribution.
     * @param gray_code_old charge index (as gray code in decimal) of the old charge distribution.
     */
    void assign_charge_index_by_gray_code(uint64_t gray_code, uint64_t gray_code_old) noexcept
    {
        strg->charge_index.first = gray_code;
        this->index_to_charge_distribution_gray_code(gray_code, gray_code_old);
    }

    /**
     * Assign a given charge index to the charge distribution layout. Charge distribution is updated according to the
     * set charge index.
     *
     * @param charge_index charge index of the new charge distribution.
     */
    void assign_charge_index(uint64_t charge_index) noexcept
    {
        assert((charge_index <= strg->max_charge_index) && "number of SiDBs is too large");
        strg->charge_index.first = charge_index;
        this->index_to_charge_distribution();
    }
    /**
     * This function is used for the *QuickSim* algorithm (see quicksim.hpp). It gets a vector with indices representing
     * negatively charged SiDBs as input. Afterward, a distant and a neutrally charged SiDB is localized using a min-max
     * diversity algorithm. This selected SiDB is set to "negative" and the index is added to the input vector such that
     * the next iteration works correctly.
     *
     * @param alpha A parameter for the algorithm (default: 0.7).
     * @param negative_indices Vector of SiDBs indices that are already negatively charged (double occupied).
     */
    void adjacent_search(const double alpha, std::vector<uint64_t>& negative_indices) noexcept

    {
        double     dist_max     = 0;
        const auto reserve_size = this->num_cells() - negative_indices.size();

        std::vector<uint64_t> index_vector{};
        index_vector.reserve(reserve_size);
        std::vector<double> distance{};
        distance.reserve(reserve_size);

        for (uint64_t unocc = 0u; unocc < strg->cell_charge.size(); unocc++)
        {
            if (strg->cell_charge[unocc] != sidb_charge_state::NEUTRAL)
            {
                continue;
            }

            const auto dist_min =
                std::accumulate(negative_indices.begin(), negative_indices.end(), std::numeric_limits<double>::max(),
                                [&](const double acc, const uint64_t occ)
                                { return std::min(acc, this->get_nm_distance_by_indices(unocc, occ)); });

            index_vector.push_back(unocc);
            distance.push_back(dist_min);

            if (dist_min > dist_max)
            {
                dist_max = dist_min;
            }
        }

        std::vector<uint64_t> candidates{};
        candidates.reserve(reserve_size);

        for (uint64_t i = 0u; i < distance.size(); ++i)
        {
            if (distance[i] >= (alpha * dist_max))
            {
                candidates.push_back(i);
            }
        }

        if (!candidates.empty())
        {
            static std::mt19937_64                  generator(std::random_device{}());
            std::uniform_int_distribution<uint64_t> dist(0, candidates.size() - 1);
            const auto                              random_element = index_vector[candidates[dist(generator)]];
            strg->cell_charge[random_element]                      = sidb_charge_state::NEGATIVE;
            negative_indices.push_back(random_element);

            strg->system_energy += -(this->get_local_potential_by_index(random_element).value());

            for (uint64_t i = 0u; i < strg->pot_mat.size(); ++i)
            {
                strg->local_pot[i] += -(this->get_electrostatic_potential_by_indices(i, random_element));
            }
        }
    }

    /**
     * This function returns all SiDBs of the layout.
     *
     * @return Vector with all cells.
     */
    std::vector<typename Lyt::cell> get_sidb_order() noexcept
    {
        return strg->sidb_order;
    }

    /**
     * This function can be used to add an SiDB to the layout. The SiDB is only added to the cell_charge and the
     * sidb_order vector.
     *
     */
    void adding_sidb_to_layout(const typename Lyt::cell& cell, const int8_t& charge) noexcept
    {
        strg->cell_charge.push_back(sign_to_charge_state(charge));
        strg->sidb_order.push_back(cell);
    }

  private:
    storage strg;

    /**
     * Initialization function used for the construction of the charge distribution surface.
     *
     * @param cs The charge state assigned to all SiDBs.
     */
    void initialize(const sidb_charge_state& cs                               = sidb_charge_state::NEGATIVE,
                    bool                     three_state_simulation_detection = false) noexcept
    {
        strg->sidb_order.reserve(this->num_cells());
        strg->cell_charge.reserve(this->num_cells());
        this->foreach_cell([this](const auto& c1) { strg->sidb_order.push_back(c1); });
        this->foreach_cell([this, &cs](const auto&) { strg->cell_charge.push_back(cs); });

        assert((((this->num_cells() < 41) && (strg->phys_params.base == 3)) ||
                ((strg->phys_params.base == 2) && (this->num_cells() < 64))) &&
               "number of SiDBs is too large");

        this->charge_distribution_to_index();
        this->initialize_nm_distance_matrix();
        this->initialize_potential_matrix();
        if (!strg->dependent_cell.is_dead())
        {
            strg->max_charge_index =
                static_cast<uint64_t>(std::pow(static_cast<double>(strg->phys_params.base), this->num_cells() - 1) - 1);
        }
        else
        {
            strg->max_charge_index =
                static_cast<uint64_t>(std::pow(static_cast<double>(strg->phys_params.base), this->num_cells()) - 1);
        }
        strg->dependent_cell_index = cell_to_index(strg->dependent_cell);
        this->update_local_potential();
        this->recompute_system_energy();
        this->validity_check();
        if (three_state_simulation_detection)
        {
            this->set_all_charge_states(sidb_charge_state::NEGATIVE);
            this->update_after_charge_change();
            this->three_state_sim_required();
            if (std::find(strg->three_state_cells.cbegin(), strg->three_state_cells.cend(), strg->dependent_cell) !=
                strg->three_state_cells.cend())
            {
                strg->dependent_cell_in_sub_layout = true;
            }
            else
            {
                strg->dependent_cell_in_sub_layout = false;
            }
        }
    };

    /**
     * Initializes the distance matrix between all the cells of the layout.
     */
    void initialize_nm_distance_matrix() const noexcept
    {
        strg->nm_dist_mat =
            std::vector<std::vector<double>>(this->num_cells(), std::vector<double>(this->num_cells(), 0));

        for (uint64_t i = 0u; i < strg->sidb_order.size(); ++i)
        {
            for (uint64_t j = 0u; j < strg->sidb_order.size(); j++)
            {
                strg->nm_dist_mat[i][j] =
                    sidb_nanometer_distance<Lyt>(*this, strg->sidb_order[i], strg->sidb_order[j], strg->phys_params);
            }
        }
    }
    /**
     * Initializes the potential matrix between all the cells of the layout.
     */
    void initialize_potential_matrix() const noexcept
    {
        strg->pot_mat = std::vector<std::vector<double>>(this->num_cells(), std::vector<double>(this->num_cells(), 0));

        for (uint64_t i = 0u; i < strg->sidb_order.size(); ++i)
        {
            for (uint64_t j = 0u; j < strg->sidb_order.size(); j++)
            {
                strg->pot_mat[i][j] = potential_between_sidbs_by_index(i, j);
            }
        }
    }
};

template <class T>
charge_distribution_surface(const T&) -> charge_distribution_surface<T>;

template <class T>
charge_distribution_surface(const T&, const sidb_simulation_parameters&) -> charge_distribution_surface<T>;

template <class T>
charge_distribution_surface(const T&, const sidb_simulation_parameters&, const sidb_charge_state& cs)
    -> charge_distribution_surface<T>;

template <class T>
charge_distribution_surface(const T&, const sidb_simulation_parameters&, const sidb_charge_state& cs,
                            const typename T::cell& variable_cells) -> charge_distribution_surface<T>;

template <class T>
charge_distribution_surface(const T&, const sidb_simulation_parameters&, const sidb_charge_state& cs,
                            const typename T::cell&                             variable_cells,
                            const std::unordered_map<typename T::cell, double>& external_pot)
    -> charge_distribution_surface<T>;

}  // namespace fiction

#endif  // FICTION_CHARGE_DISTRIBUTION_SURFACE_HPP
